@using Shared.ApiModels
@using Shared
@using Client.Components
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@page "/recipes"
<h1>Recipes</h1>

@if(_recipes == null)
{
<p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary"
                @onclick="@(OpenAddPopup)">Add</button>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var recipe in _recipes)
        {
            <tr>
                <td>@recipe.RecipeName</td>
                <td><StatusComponent Status="@recipe.Status" /></td>
                <td>
                    <button class="btn btn-danger" 
                            @onclick="@(()=>OnDelete(recipe))">Delete</button>
                    <button class="btn btn-secondary" 
                            @onclick="@(()=>OpenDuplicatePopup(recipe))">Duplicate</button>
                        <button class="btn btn-secondary"
                                @onclick="@(()=>OpenRenamePopup(recipe))">Rename</button>
                </td>
            </tr>
        }
        </tbody>

        <div class="modal fade show " id="myModal" style=" display: @(_modalMode==ModalMode.Closed? "none":"block");">
            <div class="modal-dialog bg-light" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        @if (_modalMode == ModalMode.Add)
                        {
                            <h3>Create new recipe</h3>
                        }
                        else if (_modalMode == ModalMode.Duplicate)
                        {
                            <h3>Duplicate recipe: @_selectedRecipe.RecipeName</h3>
                        }
                        else if (_modalMode == ModalMode.Rename)
                        {
                            <h3>Rename recipe: @_selectedRecipe.RecipeName</h3>
                        }
                    </div>
                    <div class="modal-body">
                        <input @bind="@NewName"/>
                    </div>
                    <div class="modal-footer">
                        <button class="btn-primary" @onclick="@OnSave">Save</button>
                        <button class="btn-primary" @onclick="@OnCancel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        
    </table>
}

@code {

    private enum ModalMode
    {
        Add,
        Duplicate,
        Rename,
        Closed
    }

    private ModalMode _modalMode=ModalMode.Closed;

    private RecipeModel? _selectedRecipe;

    public string? NewName { get; set; }

    private IList<RecipeModel>? _recipes;

    protected  override async Task OnInitializedAsync()
    {
        _recipes = await HttpClient.GetFromJsonAsync<IList<RecipeModel>>("api/Recipe");

    }
    
    private async Task OpenDuplicatePopup(RecipeModel recipe)
    {
        _selectedRecipe = recipe;
        NewName = recipe.RecipeName;
        _modalMode = ModalMode.Duplicate;
    }

    private async Task OpenRenamePopup(RecipeModel recipe)
    {
        _selectedRecipe = recipe;
        NewName = recipe.RecipeName;
        _modalMode = ModalMode.Rename;
    }

    private async Task OpenAddPopup()
    {
        NewName = "";
        _modalMode = ModalMode.Add;
    }

    private async Task OnDelete(RecipeModel recipe)
    {
        var popupResult = await JSRuntime.InvokeAsync<bool>
            ("confirm", $"Are you sure you want to delete the recipe '{recipe.RecipeName}'?");

        if (popupResult == true)
        {
            var httpStatus = await HttpClient.DeleteAsync($"api/Recipe/{recipe.Id}");
            if (!httpStatus.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
            }
        }

        _recipes = await HttpClient.GetFromJsonAsync<IList<RecipeModel>>("api/Recipe");
    }

    private async Task OnCancel()
    {
        _modalMode = ModalMode.Closed;
    }

    private async Task OnSave()
    {
        switch (_modalMode)
        {
            case ModalMode.Add:
                await OnAdd();
                break;

            case ModalMode.Duplicate:
                await OnDuplicate();
                break;
            case ModalMode.Rename:
                await OnRename();
                break;
        }
    }

    private async Task OnAdd()
    {
        var httpStatus=await HttpClient.PostAsync($"api/Recipe/AddRecipe?recipeName={Uri.EscapeDataString(NewName)}", null);
        if (!httpStatus.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
        }

        _modalMode = ModalMode.Closed;

        _recipes = await HttpClient.GetFromJsonAsync<IList<RecipeModel>>("api/Recipe");
    }

    private async Task OnDuplicate()
    {
        var httpStatus = await HttpClient.PostAsync($"api/Recipe/Duplicate/{_selectedRecipe.Id}?newRecipeName={Uri.EscapeDataString(NewName)}", null);
        if (!httpStatus.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
        } 
        _modalMode = ModalMode.Closed;

        _recipes = await HttpClient.GetFromJsonAsync<IList<RecipeModel>>("api/Recipe");
    }

    private async Task OnRename()
    {
        var httpStatus= await HttpClient.PutAsync($"api/Recipe/Rename/{_selectedRecipe.Id}?newName={Uri.EscapeDataString(NewName)}" , null);
        if (!httpStatus.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
        }
        _modalMode = ModalMode.Closed;

        _recipes = await HttpClient.GetFromJsonAsync<IList<RecipeModel>>("api/Recipe");
    }
}
